@page "/BattlePage"
@using Managers;
@using Interfaces;
@using MudBlazor;
@inject IUserInterface userInterface;
@inject IMarine HumanPlayer;

<h3>BattlePage</h3>

@code {
	public Random RandomNumberSeed = new Random();
	MarineManager ComputerPlayer = new MarineManager();
	public StatsManager ComputerStats = new StatsManager();
}

<MudStack Class="container">
	<div class="d-flex justify-content-center mt-auto">
		@{

		}
		<MudPaper Class="pa-3">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Handlers.CombatButtonHandler.CombatButtonSwitch(ref fireStatusButtonEnable)">Fire</MudButton>
		</MudPaper>
		<MudPaper Class="pa-3">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => userInterface.SetNewLocation(HumanPlayer)">Move</MudButton>
		</MudPaper>
		<MudPaper Class="pa-3">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Handlers.CombatButtonHandler.CombatButtonSwitch(ref combatStatusButtonEnable)">Status</MudButton>
		</MudPaper>
		<MudPaper Class="pa-3">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => ComputerPlayer.ReduceArmor(HumanPlayer, ArmorManager.ArmorType.Head)">ReduceArmorTest</MudButton>
		</MudPaper>
	</div>

</MudStack>
<div class="statusblock">@{

		if (combatStatusButtonEnable == true)
		{
			statstatusArray = userInterface.GetCombatStats(HumanPlayer);
			armorStatusArray = userInterface.GetArmorStats(HumanPlayer);
			@foreach(var item in statstatusArray)
			{
				<p class="statslist">@item</p>
			}
			<h3>Armor</h3>
			@foreach(var item in armorStatusArray)
			{
				<p class="statslist">@item</p>
			}
		}
	}
</div>
<div class="fireblock">
	@{
		if (fireStatusButtonEnable == true)
		{
			<p>Pick Your Target</p>
			<MudStack Class="fire-container">
				<div class="d-flex justify-content-center mt-auto">
					<MudPaper Class="pa-3">
						<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => userInterface.SetAttackAction(HumanPlayer, ComputerPlayer, ArmorManager.ArmorType.Head, RandomNumberSeed)">Head</MudButton>
					</MudPaper>
					<MudPaper Class="pa-3">
						<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => userInterface.SetAttackAction(HumanPlayer, ComputerPlayer, ArmorManager.ArmorType.Torso, RandomNumberSeed)">Torso</MudButton>
					</MudPaper>
					<MudPaper Class="pa-3">
						<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => userInterface.SetAttackAction(HumanPlayer, ComputerPlayer, ArmorManager.ArmorType.LeftPauldron, RandomNumberSeed)">Left Pauldron</MudButton>
					</MudPaper>
					<MudPaper Class="pa-3">
						<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => userInterface.SetAttackAction(HumanPlayer, ComputerPlayer, ArmorManager.ArmorType.RightPauldron, RandomNumberSeed)">Right Pauldron</MudButton>
					</MudPaper>
					<MudPaper Class="pa-3">
						<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => userInterface.SetAttackAction(HumanPlayer, ComputerPlayer, ArmorManager.ArmorType.LeftArm, RandomNumberSeed)">Left Arm</MudButton>
					</MudPaper>
					<MudPaper Class="pa-3">
						<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => userInterface.SetAttackAction(HumanPlayer, ComputerPlayer, ArmorManager.ArmorType.RightArm, RandomNumberSeed)">Right Arm</MudButton>
					</MudPaper>
					<MudPaper Class="pa-3">
						<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => userInterface.SetAttackAction(HumanPlayer, ComputerPlayer, ArmorManager.ArmorType.LeftLeg, RandomNumberSeed)">Left Leg</MudButton>
					</MudPaper>
					<MudPaper Class="pa-3">
						<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => userInterface.SetAttackAction(HumanPlayer, ComputerPlayer, ArmorManager.ArmorType.RightLeg, RandomNumberSeed)">Right Leg</MudButton>
					</MudPaper>
				</div>

			</MudStack>
		}
	}
</div>
<div>
	@{
		var armorStats = userInterface.GetArmorStats(ComputerPlayer);
		foreach(var item in armorStats)
		{
			<h4>@item</h4>
		}
	}
		<h4>Health: @ComputerPlayer.SecondaryStats.Health</h4>
</div>



@code {



	public List<string> statstatusArray;
	public List<string> armorStatusArray;


	public bool fireStatusButtonEnable = false;
	public bool combatStatusButtonEnable = false;
	public bool playerTurn = false;

	private bool isInitialized = false;



	protected override void OnInitialized()
	{
		FieldManager battleField = new();

		StatsManager.CharacterPrimaryStats computerPrimaryStats = new();
		StatsManager.CharacterSecondaryStats computerSecondaryStats = new();

		HumanPlayer.SetCharacterLocation();

		userInterface.SetPrimaryStats(ComputerPlayer, computerPrimaryStats);
		userInterface.SetSecondaryStats(computerSecondaryStats, ComputerPlayer);

		var computerStatArray = ComputerPrimaryStatManager.RandomStatsArray(RandomNumberSeed);

		ComputerPrimaryStatManager.AssignIndividualComputerStats(ComputerPrimaryStatManager.MainStats.Strength, computerStatArray, ComputerPlayer);
		ComputerPrimaryStatManager.AssignIndividualComputerStats(ComputerPrimaryStatManager.MainStats.Agility, computerStatArray, ComputerPlayer);
		ComputerPrimaryStatManager.AssignIndividualComputerStats(ComputerPrimaryStatManager.MainStats.Resilience, computerStatArray, ComputerPlayer);
		ComputerPrimaryStatManager.AssignIndividualComputerStats(ComputerPrimaryStatManager.MainStats.Perception, computerStatArray, ComputerPlayer);

		userInterface.SetEquipWeapon(ComputerPlayer, new WeaponsManager.MainWeapons.BoltRifle());
		ComputerPlayer.ResilienceToArmor();
		ComputerPlayer.SetCharacterLocation();

		bool whoGoesFirst = Managers.BattleManager.GoFirst(RandomNumberSeed);

		base.OnInitialized();
	}

}
