@page "/CharacterCreation"
@using Managers;
@using Interfaces;
@using MudBlazor;
@inject IUserInterface userInterface;
@inject IMarine HumanPlayer;


<h3>CharacterCreation</h3>

@code {
    public static StatsManager.CharacterPrimaryStats stats = new();
    public static StatsManager.CharacterSecondaryStats secStats = new();
}

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" >
                <MudNumericField T="int" Label="Strength" @bind-Value="stats.Strength" Min="1"
                oninput="@(ChangeAttributeNumberFromStrength())"
                  />
                
                <MudNumericField T="int" Label="Agility" @bind-Value="stats.Agility" Min="1"
                 oninput="@(ChangeAttributeNumberFromAgility())" />

                <MudNumericField T="int" Label="Resilience" @bind-Value="stats.Resilience" Min="1"
                oninput="@(ChangeAttributeNumberFromResilience())"/>

                <MudNumericField T="int" Label="Perception" @bind-Value="stats.Perception" Min="1"
                oninput="@(ChangeAttributeNumberFromPerception())" />
                

            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(() => form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(() => form.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(() => form.ResetValidation())">Reset Validation</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@SubmitForm">Submit</MudButton>

        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

<h3>Stat Points: @(GetAttributePoints())</h3>


@code {
    private int originalStrength = stats.Strength;
    private int originalAgility = stats.Agility;
    private int originalResilience = stats.Resilience;
    private int originalPerception = stats.Perception;
    private int GetAttributePoints()
    {
        return secStats.AttributePoints;
    }


    [Inject]
    private NavigationManager NavigationManager { get; set; }


    bool success;
    string[] errors = { };
    MudForm form;

    bool isValid;

    private int ChangeAttributeNumberFromStrength()
    { 
        int NewStrength = stats.Strength;
        if (originalStrength < NewStrength)
        {
            secStats.AttributePoints -= 1;
        } 
        else if (originalStrength > NewStrength)
        {
            secStats.AttributePoints += 1;
        }
        originalStrength = NewStrength;
        return secStats.AttributePoints;
    }

    private int ChangeAttributeNumberFromAgility()
    {
        int NewAgility = stats.Agility;
        if (originalAgility < NewAgility)
        {
            secStats.AttributePoints -= 1;
        }
        else if (originalAgility > NewAgility)
        {
            secStats.AttributePoints += 1;
        }
        originalAgility = NewAgility;
        return secStats.AttributePoints;
    }

    private int ChangeAttributeNumberFromResilience()
    {
        int NewResilience = stats.Resilience;
        if (originalResilience < NewResilience)
        {
            secStats.AttributePoints -= 1;
        }
        else if (originalResilience > NewResilience)
        {
            secStats.AttributePoints += 1;
        }
        originalResilience = NewResilience;
        return secStats.AttributePoints;
    }

    private int ChangeAttributeNumberFromPerception()
    {
        int NewPerception = stats.Perception;
        if (originalPerception < NewPerception)
        {
            secStats.AttributePoints -= 1;
        }
        else if (originalPerception > NewPerception)
        {
            secStats.AttributePoints += 1;
        }
        originalPerception = NewPerception;
        return secStats.AttributePoints;
    }

    public void SubmitForm()
    {
        if (stats.Strength < 1 || stats.Agility < 1 || stats.Perception < 1 || stats.Resilience < 1 || secStats.AttributePoints < 0)
        {
            isValid = false;
        } else
        {
            isValid = true;
        }
        if (isValid == true)
        {
            userInterface.SetPrimaryStats(HumanPlayer, stats);
            userInterface.SetSecondaryStats(secStats, HumanPlayer);
            HumanPlayer.CharacterArmor.ResilienceToArmor(HumanPlayer);

            HumanPlayer.SecondaryStats.WeightCalculation(HumanPlayer.CharacterArmor.ArmorList);
            HumanPlayer.SecondaryStats.PossibleMovementDistance(HumanPlayer);

            userInterface.SetEquipWeapon(HumanPlayer, new WeaponsManager.MainWeapons.BoltRifle());
            secStats.AccuracyCalculation(HumanPlayer);
            

			NavigationManager.NavigateTo("./BattlePage");
		}

    }


    }


}
