@page "/CharacterCreation"
@using Managers;
@using Interfaces;
@using MudBlazor;
@inject IUserInterface userInterface;
@inject IMarine HumanPlayer;
@inject Handlers.StrengthStatButtonHandler playerStatButtonHandler;


<h3>CharacterCreation</h3>


<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" >


				<!--				<MudNumericField T="int" Label="Agility" @bind-Value="HumanPlayer.PrimaryStats.Agility" Min="1"
												 oninput="@(playerStatButtonHandler.ChangeAttributeNumberFromAgility())" />

								<MudNumericField T="int" Label="Resilience" @bind-Value="HumanPlayer.PrimaryStats.Resilience" Min="1"
												 oninput="@(playerStatButtonHandler.ChangeAttributeNumberFromResilience())" />

								<MudNumericField T="int" Label="Perception" @bind-Value="HumanPlayer.PrimaryStats.Perception" Min="1"
												 oninput="@(playerStatButtonHandler.ChangeAttributeNumberFromPerception())" />-->


                <MudNumericField T="int" Label="Strength" @bind-Value="HumanPlayer.PrimaryStats.Strength" Min="1"
                                 oninput="@(playerStatButtonHandler.ChangeAttributeNumberFromStrength(ref initialStrength))" />




            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(() => form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(() => form.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(async () => await form.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@SubmitForm">Submit</MudButton>

        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

<h3>Stat Points: @(playerStatButtonHandler.GetAttributePoints())</h3>


@code {

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    bool success;
    string[] errors = { };
    MudForm form;

    bool isValid;

    public int initialStrength;
    protected override void OnInitialized()
    {
        initialStrength = playerStatButtonHandler.SetStrengthStat();

        base.OnInitialized();
    }

    public void SubmitForm()
    {
        if (HumanPlayer.PrimaryStats.Strength < 1 || HumanPlayer.PrimaryStats.Agility < 1 || HumanPlayer.PrimaryStats.Perception < 1 || HumanPlayer.PrimaryStats.Resilience < 1 || HumanPlayer.SecondaryStats.AttributePoints < 0)
        {
            isValid = false;
        } else
        {
            isValid = true;
        }
        if (isValid == true)
        {

            HumanPlayer.ResilienceToArmor();

            HumanPlayer.SecondaryStats.WeightCalculation(HumanPlayer.CharacterArmor.ArmorList);
            HumanPlayer.SecondaryStats.PossibleMovementDistance(HumanPlayer);

            userInterface.SetEquipWeapon(HumanPlayer, new WeaponsManager.MainWeapons.BoltRifle());
            StatsManager.CharacterSecondaryStats.StartingStatAccuracyCalculation(HumanPlayer);
            

			NavigationManager.NavigateTo("./BattlePage");
		}

    }


    }

}
