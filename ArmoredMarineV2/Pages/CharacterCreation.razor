@page "/CharacterCreation"
@using Managers;
@using Interfaces;
@using MudBlazor;
@inject IUserInterface userInterface;
@inject IMarine HumanPlayer;


<h3>CharacterCreation</h3>

@code{
       public static StatsManager.CharacterPrimaryStats stats = new();
        public static StatsManager.CharacterSecondaryStats secStats = new();
        static int originalStrength = stats.Strength;
        static int originalAgility = stats.Agility;
        static int originalResilience = stats.Resilience;
        static int originalPerception = stats.Perception;
}

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudNumericField T="int" Label="Strength" @bind-Value="stats.Strength" 
                />
                
                <MudNumericField T="int" Label="Agility" @bind-Value="stats.Agility" />
                <MudNumericField T="int" Label="Resilience" @bind-Value="stats.Resilience" />
                <MudNumericField T="int" Label="Perception" @bind-Value="stats.Perception" />
                

            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(() => form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(() => form.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(() => form.ResetValidation())">Reset Validation</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@SubmitForm">Submit</MudButton>

        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
@code {
    static int strengthDifference = stats.Strength - originalStrength;
    static int agilityDifference = stats.Agility - originalAgility;
    static int resilienceDifference = stats.Resilience - originalResilience;
    static int perceptionDifference = stats.Perception - originalPerception;

    static int totalStatDifference = strengthDifference + agilityDifference + resilienceDifference + perceptionDifference;
}

<h2 @>Attribute Points Remaining: @(HumanPlayer.SecondaryStats.AttributePoints)</h2>


@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    bool success;
    string[] errors = { };
    MudForm form;
    bool isStrengthValid = true;
    bool isAgilityValid = true;
    bool isResilienceValid = true;
    bool isPerceptionValid = true;

    bool isValid;

    private int statRange { get; set; }




    public void SubmitForm()
    {
        if (stats.Strength < 1 || stats.Agility < 1 || stats.Perception < 1 || stats.Resilience < 1 || secStats.AttributePoints < 0)
        {
            isValid = false;
        } else
        {
            isValid = true;
        }
        if (isValid == true)
		{
			userInterface.SetPrimaryStats(stats, HumanPlayer);
			userInterface.SetSecondaryStats(secStats, HumanPlayer);
			HumanPlayer.CharacterArmor.ResilienceToArmor(HumanPlayer);

			HumanPlayer.SecondaryStats.WeightCalculation(HumanPlayer.CharacterArmor.ArmorList);
			HumanPlayer.SecondaryStats.PossibleMovementDistance(HumanPlayer);

			NavigationManager.NavigateTo("./BattlePage");
		}

    }


    }


}
