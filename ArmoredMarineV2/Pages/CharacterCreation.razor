@page "/CharacterCreation"
@using Managers;
@using Interfaces;
@using MudBlazor;
@using Constructors;
@inject IUserInterface userInterface;


@code{
    public static StatsManager.CharacterPrimaryStats PrimaryStats = new();
    public static StatsManager.CharacterSecondaryStats SecondaryStats = new();

    static int currentStrength = PrimaryStats.Strength;
    static int currentAgility = PrimaryStats.Agility;
    static int currentResilience = PrimaryStats.Resilience;
    static int currentPerception = PrimaryStats.Perception;

}

<h3>CharacterCreation</h3>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudNumericField Label="Strength" @bind-Value="PrimaryStats.Strength" Min="1" 
                />
                <MudNumericField Label="Agility" @bind-Value="PrimaryStats.Agility" Min="1" />
                <MudNumericField Label="Resilience" @bind-Value="PrimaryStats.Resilience" Min="1" />
                <MudNumericField Label="Perception" @bind-Value="PrimaryStats.Perception" Min="1" />

            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(() => form.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@ValidateAndSubmit">Submit</MudButton>

        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
<h3>@SecondaryStats.AttributePoints</h3>
<h3>@PrimaryStats.Strength</h3>
<h3>@currentStrength</h3> 
<h3>@{
    strengthDifference = Convert.ToInt32(PrimaryStats.Strength) - currentStrength;
	}
    @strengthDifference
</h3>
@code {

    int strengthDifference;
    bool success;
    bool validationSuccess;
    string[] errors = { };
    MudForm form;


    private enum StatType
    {
        Strength,
        Agility,
        Resilience,
        Perception
    }

    private string StatCheck()
    {
        if (PrimaryStats.Strength < 1)
        {
            return "Stat must be greater than 1!";
        }

        return "";


    }

    private async Task ValidateAndSubmit()
    {   
        validationSuccess = true;
        if (validationSuccess)
        {
            await SubmitForm();
        }
        
    }

	private async Task SubmitForm()
	{
		userInterface.SetPrimaryStats(PrimaryStats);
	}
}


